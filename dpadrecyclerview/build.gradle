plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id  'jacoco'
}

jacoco {
    toolVersion = versions.jacoco
}

android {
    compileSdk versions.compileSdkVersion

    defaultConfig {
        minSdk versions.minSdkVersion
        targetSdk versions.targetSdkVersion
        consumerProguardFiles "consumer-rules.pro"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
      //  testInstrumentationRunnerArguments clearPackageData: 'true'
      //  testInstrumentationRunnerArguments useTestStorageService: 'true'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        buildConfig false
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    tasks.withType(Test).configureEach {
        jacoco {
            includeNoLocationClasses = true
            excludes = ['jdk.internal.*']
        }
    }
}

dependencies {
    implementation "androidx.recyclerview:recyclerview:$versions.recyclerview"
   // implementation "androidx.leanback:leanback-grid:1.0.0-alpha01"
    testImplementation "junit:junit:$testVersions.junit"
    testImplementation "com.google.truth:truth:$testVersions.truth"
    debugImplementation "androidx.fragment:fragment-testing:$testVersions.fragment"
    androidTestImplementation "androidx.test:core-ktx:$testVersions.testCore"
    androidTestImplementation "androidx.test:runner:$testVersions.testCore"
    androidTestImplementation "androidx.test:rules:$testVersions.testCore"
    androidTestImplementation "androidx.test.ext:truth:$testVersions.testCore"
    androidTestImplementation "androidx.test.ext:junit-ktx:$testVersions.espressoJunit"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$testVersions.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-core:$testVersions.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$testVersions.espresso"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$testVersions.uiautomator"
    androidTestUtil "androidx.test:orchestrator:$testVersions.orchestrator"
}

def projectSrcDirs = ["src/main/java", "src/main/kotlin"]

task createJacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugAndroidTestCoverageReport']) {

    reports {
        html.destination file("../test_coverage")
    }

    def exclusions = [
            '**/*_Impl*',
            '**/*_Impl*.class'
    ]

    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: exclusions)
    classDirectories.setFrom(files([kotlinTree]))
    sourceDirectories.setFrom(files(projectSrcDirs))
    executionData.setFrom(fileTree(
            dir: "$project.buildDir", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*/*.ec"
    ]))
}

task createJacocoTestReportNew(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        html.destination file("../test_coverage")
    }

    def exclusions = [
            '**/*_Impl*',
            '**/*_Impl*.class'
    ]

    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: exclusions)
    classDirectories.setFrom(files([kotlinTree]))
    sourceDirectories.setFrom(files(projectSrcDirs))
    executionData.setFrom(fileTree(
            dir: "$project.buildDir", includes: [
            "outputs/code_coverage/debugAndroidTest/connected/*/*.ec"
    ]))
}